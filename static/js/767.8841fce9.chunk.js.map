{"version":3,"file":"static/js/767.8841fce9.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Loader/Loader.jsx","components/Form/Form.jsx","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectLoading = state => state.contacts.loading;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter.filter;\n\n\nexport const selectAllContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { deleteContact, fetchContacts } from 'redux/contacts/operations';\nimport { selectAllContacts } from 'redux/contacts/selectors';\n\nexport default function ContactList() {\n  const isFirstRender = useRef(true);\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n\n  useEffect(() => {\n    if (isFirstRender.current) {\n      dispatch(fetchContacts());\n    }\n    isFirstRender.current = false;\n    return;\n  }, [dispatch]);\n\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id}>\n          {name}: {number}\n          <button onClick={() => dispatch(deleteContact(id))}>Delete</button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { filterContact } from 'redux/filterSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <form>\n      <label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={filter}\n          onChange={evt => dispatch(filterContact(evt.target.value))}\n          required\n          placeholder=\"Find contacts by name\"\n        />\n      </label>\n    </form>\n  );\n};\n\nexport default Filter;\n","import { RotatingLines } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { addContact } from 'redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAllContacts } from 'redux/contacts/selectors';\n\nexport function Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectAllContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    contacts\n      .map(contact => contact.name.toLowerCase())\n      .includes(name.toLowerCase())\n      ? alert(`${name} is already in contacts`)\n      : dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={name}\n          onChange={handleChange}\n          required\n          placeholder=\"Name\"\n        />\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={number}\n          onChange={handleChange}\n          required\n          placeholder=\"Phone number\"\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nexport default Form;\n","import ContactList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\nimport { Loader } from '../components/Loader/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { Helmet } from 'react-helmet';\nimport { Form } from 'components/Form/Form';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport function Contacts() {\n  const isLoading = useSelector(selectLoading);\n  const dispatch = useDispatch();\n  // const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <h2>Phonebook</h2>\n      <Form />\n      <h2>Contact</h2>\n      <Filter />\n      <ContactList />\n      {isLoading && <Loader />}\n    </div>\n  );\n}\nexport default Contacts;\n"],"names":["selectLoading","state","contacts","loading","selectFilter","filter","selectAllContacts","createSelector","items","contact","name","toLowerCase","includes","ContactList","isFirstRender","useRef","dispatch","useDispatch","useSelector","useEffect","current","fetchContacts","map","id","number","onClick","deleteContact","type","pattern","title","value","onChange","evt","filterContact","target","required","placeholder","Loader","style","textAlign","strokeColor","strokeWidth","animationDuration","width","visible","Form","useState","setName","setNumber","handleChange","event","currentTarget","onSubmit","preventDefault","alert","addContact","Contacts","isLoading","Helmet"],"sourceRoot":""}